// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

export interface Recommendations {
  responseContext: ResponseContext;
  contents: Contents;
  currentVideoEndpoint: CurrentVideoEndpoint;
  trackingParams: string;
  playerOverlays: PlayerOverlays;
  videoReporting: VideoReporting;
  queueContextParams: string;
}

export interface Contents {
  singleColumnMusicWatchNextResultsRenderer: SingleColumnMusicWatchNextResultsRenderer;
}

export interface SingleColumnMusicWatchNextResultsRenderer {
  tabbedRenderer: TabbedRenderer;
}

export interface TabbedRenderer {
  watchNextTabbedResultsRenderer: WatchNextTabbedResultsRenderer;
}

export interface WatchNextTabbedResultsRenderer {
  tabs: Tab[];
}

export interface Tab {
  tabRenderer: TabRenderer;
}

export interface TabRenderer {
  title: string;
  content?: TabRendererContent;
  trackingParams: string;
  endpoint?: Endpoint;
}

export interface TabRendererContent {
  musicQueueRenderer: MusicQueueRenderer;
}

export interface MusicQueueRenderer {
  content: MusicQueueRendererContent;
  hack: boolean;
  header: Header;
  subHeaderChipCloud: SubHeaderChipCloud;
}

export interface MusicQueueRendererContent {
  playlistPanelRenderer: PlaylistPanelRenderer;
}

export interface PlaylistPanelRenderer {
  title: string;
  contents: ContentElement[];
  playlistId: PlaylistID;
  isInfinite: boolean;
  continuations: Continuation[];
  shortBylineText: Title;
  trackingParams: string;
  titleText: Title;
  previewDescription: PreviewDescription;
  numItemsToShow: number;
}

export interface ContentElement {
  playlistPanelVideoRenderer: PlaylistPanelVideoRenderer;
}

export interface PlaylistPanelVideoRenderer {
  title: Title;
  longBylineText: LongBylineText;
  thumbnail: ThumbnailDetailsClass;
  lengthText: LengthText;
  selected: boolean;
  navigationEndpoint: PlaylistPanelVideoRendererNavigationEndpoint;
  videoId: string;
  shortBylineText: Title;
  trackingParams: string;
  menu: Menu;
  playlistSetVideoId: string;
  canReorder: boolean;
  badges?: Badge[];
}

export interface Badge {
  musicInlineBadgeRenderer: MusicInlineBadgeRenderer;
}

export interface MusicInlineBadgeRenderer {
  trackingParams: string;
  icon: Icon;
  accessibilityData: Accessibility;
}

export interface Accessibility {
  accessibilityData: AccessibilityData;
}

export interface AccessibilityData {
  label: string;
}

export interface Icon {
  iconType: IconType;
}

export enum IconType {
  AddToPlaylist = "ADD_TO_PLAYLIST",
  AddToRemoteQueue = "ADD_TO_REMOTE_QUEUE",
  Album = "ALBUM",
  Artist = "ARTIST",
  Favorite = "FAVORITE",
  Flag = "FLAG",
  Mix = "MIX",
  MusicExplicitBadge = "MUSIC_EXPLICIT_BADGE",
  QueuePlayNext = "QUEUE_PLAY_NEXT",
  Remove = "REMOVE",
  Share = "SHARE",
  Unfavorite = "UNFAVORITE",
}

export interface LengthText {
  runs: PurpleRun[];
  accessibility: Accessibility;
}

export interface PurpleRun {
  text: string;
}

export interface LongBylineText {
  runs: LongBylineTextRun[];
}

export interface LongBylineTextRun {
  text: string;
  navigationEndpoint?: Endpoint;
}

export interface Endpoint {
  clickTrackingParams: string;
  browseEndpoint: BrowseEndpoint;
}

export interface BrowseEndpoint {
  browseId: string;
  browseEndpointContextSupportedConfigs: BrowseEndpointContextSupportedConfigs;
}

export interface BrowseEndpointContextSupportedConfigs {
  browseEndpointContextMusicConfig: BrowseEndpointContextMusicConfig;
}

export interface BrowseEndpointContextMusicConfig {
  pageType: PageType;
}

export enum PageType {
  MusicPageTypeAlbum = "MUSIC_PAGE_TYPE_ALBUM",
  MusicPageTypeArtist = "MUSIC_PAGE_TYPE_ARTIST",
  MusicPageTypeTrackLyrics = "MUSIC_PAGE_TYPE_TRACK_LYRICS",
  MusicPageTypeTrackRelated = "MUSIC_PAGE_TYPE_TRACK_RELATED",
}

export interface Menu {
  menuRenderer: MenuRenderer;
}

export interface MenuRenderer {
  items: MenuRendererItem[];
  trackingParams: string;
  accessibility: Accessibility;
}

export interface MenuRendererItem {
  menuNavigationItemRenderer?: MenuItemRenderer;
  menuServiceItemRenderer?: MenuItemRenderer;
  toggleMenuServiceItemRenderer?: ToggleMenuServiceItemRenderer;
}

export interface MenuItemRenderer {
  text: Title;
  icon: Icon;
  navigationEndpoint?: MenuNavigationItemRendererNavigationEndpoint;
  trackingParams: string;
  serviceEndpoint?: ServiceEndpoint;
}

export interface MenuNavigationItemRendererNavigationEndpoint {
  clickTrackingParams: string;
  watchEndpoint?: PurpleWatchEndpoint;
  modalEndpoint?: ModalEndpoint;
  browseEndpoint?: BrowseEndpoint;
  shareEntityEndpoint?: ShareEntityEndpoint;
}

export interface ModalEndpoint {
  modal: Modal;
}

export interface Modal {
  modalWithTitleAndButtonRenderer: ModalWithTitleAndButtonRenderer;
}

export interface ModalWithTitleAndButtonRenderer {
  title: Title;
  content: Title;
  button: CancelButtonClass;
}

export interface CancelButtonClass {
  buttonRenderer: ButtonRenderer;
}

export interface ButtonRenderer {
  style: StyleEnum;
  isDisabled: boolean;
  text: Title;
  navigationEndpoint?: ButtonRendererNavigationEndpoint;
  trackingParams: string;
}

export interface ButtonRendererNavigationEndpoint {
  clickTrackingParams: string;
  signInEndpoint: SignInEndpoint;
}

export interface SignInEndpoint {
  hack: boolean;
}

export enum StyleEnum {
  StyleBlueText = "STYLE_BLUE_TEXT",
  StyleBrand = "STYLE_BRAND",
  StyleText = "STYLE_TEXT",
}

export interface Title {
  runs: PurpleRun[];
}

export interface ShareEntityEndpoint {
  serializedShareEntity: string;
  sharePanelType: SharePanelType;
}

export enum SharePanelType {
  SharePanelTypeUnifiedSharePanel = "SHARE_PANEL_TYPE_UNIFIED_SHARE_PANEL",
}

export interface PurpleWatchEndpoint {
  videoId: string;
  playlistId: string;
  params: PurpleParams;
  loggingContext: LoggingContext;
  watchEndpointMusicSupportedConfigs: PurpleWatchEndpointMusicSupportedConfigs;
}

export interface LoggingContext {
  vssLoggingContext: VssLoggingContext;
}

export interface VssLoggingContext {
  serializedContextData: string;
}

export enum PurpleParams {
  WAEB = "wAEB",
}

export interface PurpleWatchEndpointMusicSupportedConfigs {
  watchEndpointMusicConfig: PurpleWatchEndpointMusicConfig;
}

export interface PurpleWatchEndpointMusicConfig {
  musicVideoType: MusicVideoType;
}

export enum MusicVideoType {
  MusicVideoTypeAtv = "MUSIC_VIDEO_TYPE_ATV",
}

export interface ServiceEndpoint {
  clickTrackingParams: string;
  queueAddEndpoint?: QueueAddEndpoint;
  removeFromQueueEndpoint?: RemoveFromQueueEndpoint;
  modalEndpoint?: ModalEndpoint;
}

export interface QueueAddEndpoint {
  queueTarget: QueueTarget;
  queueInsertPosition: QueueInsertPosition;
  commands: Command[];
}

export interface Command {
  clickTrackingParams: string;
  addToToastAction: AddToToastAction;
}

export interface AddToToastAction {
  item: AddToToastActionItem;
}

export interface AddToToastActionItem {
  notificationTextRenderer: NotificationTextRenderer;
}

export interface NotificationTextRenderer {
  successResponseText: Title;
  trackingParams: string;
}

export enum QueueInsertPosition {
  InsertAfterCurrentVideo = "INSERT_AFTER_CURRENT_VIDEO",
  InsertAtEnd = "INSERT_AT_END",
}

export interface QueueTarget {
  videoId: string;
  onEmptyQueue: OnEmptyQueue;
}

export interface OnEmptyQueue {
  clickTrackingParams: string;
  watchEndpoint: Target;
}

export interface Target {
  videoId: string;
}

export interface RemoveFromQueueEndpoint {
  videoId: string;
  commands: Command[];
}

export interface ToggleMenuServiceItemRenderer {
  defaultText: Title;
  defaultIcon: Icon;
  defaultServiceEndpoint: DislikeNavigationEndpoint;
  toggledText: Title;
  toggledIcon: Icon;
  trackingParams: string;
}

export interface DislikeNavigationEndpoint {
  clickTrackingParams: string;
  modalEndpoint: ModalEndpoint;
}

export interface PlaylistPanelVideoRendererNavigationEndpoint {
  clickTrackingParams: string;
  watchEndpoint: FluffyWatchEndpoint;
}

export interface FluffyWatchEndpoint {
  videoId: string;
  playlistId: PlaylistID;
  index: number;
  params: FluffyParams;
  playerParams: string;
  playlistSetVideoId: string;
  loggingContext: LoggingContext;
  watchEndpointMusicSupportedConfigs: FluffyWatchEndpointMusicSupportedConfigs;
}

export enum FluffyParams {
  OAHyAQIIAQ3D3D = "OAHyAQIIAQ%3D%3D",
}

export enum PlaylistID {
  RDAMVMiM6IO8TD3TM = "RDAMVMiM6iO8TD3tM",
}

export interface FluffyWatchEndpointMusicSupportedConfigs {
  watchEndpointMusicConfig: FluffyWatchEndpointMusicConfig;
}

export interface FluffyWatchEndpointMusicConfig {
  hasPersistentPlaylistPanel: boolean;
  musicVideoType: MusicVideoType;
}

export interface ThumbnailDetailsClass {
  thumbnails: ThumbnailElement[];
}

export interface ThumbnailElement {
  url: string;
  width: number;
  height: number;
}

export interface Continuation {
  nextRadioContinuationData: NextRadioContinuationData;
}

export interface NextRadioContinuationData {
  continuation: string;
  clickTrackingParams: string;
}

export interface PreviewDescription {}

export interface Header {
  musicQueueHeaderRenderer: MusicQueueHeaderRenderer;
}

export interface MusicQueueHeaderRenderer {
  title: Title;
  subtitle: Title;
  buttons: ButtonElement[];
  trackingParams: string;
}

export interface ButtonElement {
  chipCloudChipRenderer: ButtonChipCloudChipRenderer;
}

export interface ButtonChipCloudChipRenderer {
  style: StyleClass;
  text: Title;
  navigationEndpoint: PurpleNavigationEndpoint;
  trackingParams: string;
  icon: Icon;
  accessibilityData: Accessibility;
  isSelected: boolean;
  uniqueId: string;
}

export interface PurpleNavigationEndpoint {
  clickTrackingParams: string;
  modalEndpoint: ModalEndpoint;
  saveQueueToPlaylistCommand: PreviewDescription;
}

export interface StyleClass {
  styleType: string;
}

export interface SubHeaderChipCloud {
  chipCloudRenderer: ChipCloudRenderer;
}

export interface ChipCloudRenderer {
  chips: Chip[];
  trackingParams: string;
}

export interface Chip {
  chipCloudChipRenderer: ChipChipCloudChipRenderer;
}

export interface ChipChipCloudChipRenderer {
  text: Title;
  navigationEndpoint: FluffyNavigationEndpoint;
  trackingParams: string;
  accessibilityData: Accessibility;
  isSelected: boolean;
  uniqueId: string;
}

export interface FluffyNavigationEndpoint {
  clickTrackingParams: string;
  queueUpdateCommand: QueueUpdateCommand;
}

export interface QueueUpdateCommand {
  queueUpdateSection: QueueUpdateSection;
  fetchContentsCommand: FetchContentsCommand;
  dedupeAgainstLocalQueue: boolean;
}

export interface FetchContentsCommand {
  clickTrackingParams: string;
  watchEndpoint: FetchContentsCommandWatchEndpoint;
}

export interface FetchContentsCommandWatchEndpoint {
  playlistId: string;
  params: string;
  loggingContext: LoggingContext;
}

export enum QueueUpdateSection {
  QueueUpdateSectionQueue = "QUEUE_UPDATE_SECTION_QUEUE",
}

export interface CurrentVideoEndpoint {
  clickTrackingParams: string;
  watchEndpoint: CurrentVideoEndpointWatchEndpoint;
}

export interface CurrentVideoEndpointWatchEndpoint {
  videoId: string;
  playlistId: PlaylistID;
  index: number;
  playlistSetVideoId: string;
  loggingContext: LoggingContext;
}

export interface PlayerOverlays {
  playerOverlayRenderer: PlayerOverlayRenderer;
}

export interface PlayerOverlayRenderer {
  actions: Action[];
  browserMediaSession: BrowserMediaSession;
}

export interface Action {
  likeButtonRenderer: LikeButtonRenderer;
}

export interface LikeButtonRenderer {
  target: Target;
  likeStatus: string;
  trackingParams: string;
  likesAllowed: boolean;
  dislikeNavigationEndpoint: DislikeNavigationEndpoint;
  likeCommand: DislikeNavigationEndpoint;
}

export interface BrowserMediaSession {
  browserMediaSessionRenderer: BrowserMediaSessionRenderer;
}

export interface BrowserMediaSessionRenderer {
  album: Title;
  thumbnailDetails: ThumbnailDetailsClass;
}

export interface ResponseContext {
  visitorData: string;
  serviceTrackingParams: ServiceTrackingParam[];
}

export interface ServiceTrackingParam {
  service: string;
  params: Param[];
}

export interface Param {
  key: string;
  value: string;
}

export interface VideoReporting {
  reportFormModalRenderer: ReportFormModalRenderer;
}

export interface ReportFormModalRenderer {
  optionsSupportedRenderers: OptionsSupportedRenderers;
  trackingParams: string;
  title: Title;
  submitButton: CancelButtonClass;
  cancelButton: CancelButtonClass;
  footer: Footer;
}

export interface Footer {
  runs: FooterRun[];
}

export interface FooterRun {
  text: string;
  navigationEndpoint?: RunNavigationEndpoint;
}

export interface RunNavigationEndpoint {
  clickTrackingParams: string;
  urlEndpoint: URLEndpoint;
}

export interface URLEndpoint {
  url: string;
}

export interface OptionsSupportedRenderers {
  optionsRenderer: OptionsRenderer;
}

export interface OptionsRenderer {
  items: OptionsRendererItem[];
  trackingParams: string;
}

export interface OptionsRendererItem {
  optionSelectableItemRenderer: OptionSelectableItemRenderer;
}

export interface OptionSelectableItemRenderer {
  text: Title;
  trackingParams: string;
  submitEndpoint: SubmitEndpoint;
}

export interface SubmitEndpoint {
  clickTrackingParams: string;
  flagEndpoint: FlagEndpoint;
}

export interface FlagEndpoint {
  flagAction: string;
}
